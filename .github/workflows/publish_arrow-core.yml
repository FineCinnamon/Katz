# This is separated by library because of a limit with GitHub and Bintray about the number of published artifacts.
name: "Publish Arrow Core"

on:
  push:
    branches:
    - master
    paths:
    - 'gradle.properties'
    - 'gradle/**'
    - 'scripts/**'

jobs:
  publish-arrow-core:

    env:
      BASEDIR: ${{github.workspace}}/..
      JAVA_OPTS: -Xms512m -Xmx1024m
      ARROW_LIB: arrow-core
      BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: "Check versions"
      id: versions
      run: |
        LATEST_PUBLISHED_RELEASE_VERSION=$(curl -X GET https://api.bintray.com/packages/arrow-kt/arrow-kt/arrow/versions/_latest | jq -r '.name')
        LATEST_PUBLISHED_SNAPSHOT_VERSION=$(curl https://oss.jfrog.org/artifactory/oss-snapshot-local/io/arrow-kt/arrow-core/maven-metadata.xml | grep latest | cut -d'>' -f2 | cut -d'<' -f1)
        RELEASE_VERSION=$(grep LATEST_VERSION gradle.properties | cut -d= -f2)
        SNAPSHOT_VERSION=$(grep VERSION_NAME gradle.properties | cut -d= -f2)
        NEW_RELEASE_VERSION_EXISTS=$([ "$LATEST_PUBLISHED_RELEASE_VERSION" == "$RELEASE_VERSION" ] && echo '0' || echo '1')
        NEW_SNAPSHOT_VERSION_EXISTS=$([ "$LATEST_PUBLISHED_SNAPSHOT_VERSION" == "$SNAPSHOT_VERSION" ] && echo '0' || echo '1')
        echo "::set-output name=latest-published-release-version::$LATEST_PUBLISHED_RELEASE_VERSION"
        echo "::set-output name=release-version::$RELEASE_VERSION"
        echo "::set-output name=snapshot-version::$SNAPSHOT_VERSION"
        echo "::set-output name=new-release-version-exists::$NEW_RELEASE_VERSION_EXISTS"
        echo "::set-output name=new-snapshot-version-exists::$NEW_SNAPSHOT_VERSION_EXISTS"
    - name: Publish into Bintray
      if: steps.versions.outputs.new-release-version-exists == '1'
      run: |
        echo "Update version ..."
        perl -pe "s/^VERSION_NAME=.*/VERSION_NAME=${{ steps.versions.outputs.release-version }}/g" -i gradle.properties
        $BASEDIR/arrow/scripts/lib-publish.sh $ARROW_LIB
    - name: Update versions for documentation
      if: ${{ steps.versions.outputs.new-release-version-exists == '1' || steps.versions.outputs.new-snapshot-version-exists == '1' }}
      run: |
        cd $BASEDIR/arrow-core
        git remote set-url origin https://arrow-kt:$GITHUB_TOKEN@github.com/arrow-kt/arrow-core.git
        git config --global user.email "arrow-kt@users.noreply.github.com"
        git config --global user.name "arrow-kt"
        perl -pe "s/[0-9]+\.[0-9]+\.[0-9]+-SNAPSHOT/${{ steps.versions.outputs.snapshot-version }}/g" -i arrow-docs/docs/quickstart/setup/README.md
        perl -pe "s/${{ steps.versions.outputs.latest-published-release-version }}/${{ steps.versions.outputs.release-version }}/g" -i arrow-docs/docs/quickstart/setup/README.md
        git add arrow-docs/docs/quickstart/setup/README.md
        git diff --staged
        git commit -m "Documentation: update versions"
        git push origin HEAD:master
    - name: Create tag
      if: steps.versions.outputs.new-release-version-exists == '1'
      run: |
        cd $BASEDIR/$ARROW_LIB
        git remote set-url origin https://arrow-kt:$GITHUB_TOKEN@github.com/arrow-kt/$ARROW_LIB.git
        git config --global user.email "arrow-kt@users.noreply.github.com"
        git config --global user.name "arrow-kt"
        git tag -a ${{ steps.versions.outputs.release-version }} -m "Release ${{ steps.versions.outputs.release-version }}"
        git push origin ${{ steps.versions.outputs.release-version }}
    - name: Create release notes
      if: steps.versions.outputs.new-release-version-exists == '1'
      run: |
        export LATEST_PUBLISHED_VERSION=${{ steps.versions.outputs.latest-published-release-version }}
        export RELEASE_VERSION=${{ steps.versions.outputs.release-version }}
        $BASEDIR/arrow/scripts/create-release-notes.sh
