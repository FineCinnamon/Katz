name: "Publish documentation"

on:
  push:
    branches:
    - master
    # paths:
    # - 'arrow-libs/**'
    # - 'arrow-docs/**'
    # - 'arrow-site/**'

jobs:
  publish_doc:

    env:
      BASEDIR: ${{github.workspace}}/arrow-libs
      JAVA_OPTS: -Xms512m -Xmx1024m
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
      JEKYLL_ENV: production

    runs-on: macos-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: "Check versions"
      id: versions
      run: |
        LATEST_PUBLISHED_RELEASE_VERSION=$(curl -X GET https://api.bintray.com/packages/arrow-kt/arrow-kt/arrow/versions/_latest | jq -r '.name')
        RELEASE_VERSION=$(grep LATEST_VERSION $BASEDIR/gradle.properties | cut -d= -f2)
        NEW_RELEASE_VERSION_EXISTS=$([ "$LATEST_PUBLISHED_RELEASE_VERSION" == "$RELEASE_VERSION" ] && echo '0' || echo '1')
        echo "::set-output name=latest-published-release-version::$LATEST_PUBLISHED_RELEASE_VERSION"
        echo "::set-output name=release-version::$RELEASE_VERSION"
        echo "::set-output name=new-release-version-exists::$NEW_RELEASE_VERSION_EXISTS"
    - name: "Prepare environment"
      working-directory: arrow-site
      run: |
        mkdir $BASEDIR/logs
        brew install tree
        bundle install --gemfile Gemfile --path vendor/bundle
    - name: "Create APIdoc"
      working-directory: arrow-libs
      run: ./gradlew dokka
    - name: "Validate documentation"
      working-directory: arrow-docs
      run: ./gradlew runAnk
    - name: "Latest release: build (landing page + docs/)"
      if: steps.versions.outputs.new-release-version-exists == '1'
      working-directory: arrow-site
      run: |
        bundle exec jekyll build -b docs -s docs
        tree _site > $BASEDIR/logs/content_docs.log
    - name: "Latest release: publish (landing page + docs/)"
      if: steps.versions.outputs.new-release-version-exists == '1'
      working-directory: arrow-site
      run: |
        echo ">>> Latest release" >> $BASEDIR/logs/aws_sync.log
        ${GITHUB_WORKSPACE}/.github/scripts/publish-latest-release.sh
    - name: "Remove index for versions"
      working-directory: arrow-site
      run: rm -f docs/index.md
    - name: "Latest release: build release directory (docs/<major.minor>)"
      if: steps.versions.outputs.new-release-version-exists == '1'
      working-directory: arrow-site
      run: |
        SHORT_VERSION=$(echo ${{ steps.versions.outputs.release-version }} | cut -d. -f1-2)
        bundle exec jekyll build -b docs/${SHORT_VERSION} -s docs
        tree _site > $BASEDIR/logs/content_docs-${SHORT_VERSION}.log
    - name: "Latest release: publish release directory (docs/<major.minor>)"
      if: steps.versions.outputs.new-release-version-exists == '1'
      working-directory: arrow-site
      run: |
        SHORT_VERSION=$(echo ${{ steps.versions.outputs.release-version }} | cut -d. -f1-2)
        echo ">>> $SHORT_VERSION VERSION" >> $BASEDIR/logs/aws_sync.log
        if [ "${SHORT_VERSION}" != "" ]; then
          aws s3 sync _site s3://$S3_BUCKET/docs/$SHORT_VERSION --delete >> $BASEDIR/logs/aws_sync.log
        else
          exit 1
        fi
    - name: "Next version: build (/docs/next)"
      working-directory: arrow-site
      run: |
        bundle exec jekyll build -b docs/next -s docs
        tree _site > $BASEDIR/logs/content_docs-next.log
    - name: "Next version: publish (/docs/next)"
      working-directory: arrow-site
      run: |
        echo ">>> NEXT VERSION" >> $BASEDIR/logs/aws_sync.log
        aws s3 sync _site s3://$S3_BUCKET/docs/next --delete >> $BASEDIR/logs/aws_sync.log
    - name: "Site: publish sitemap.xml"
      run: |
        ${GITHUB_WORKSPACE}/.github/scripts/create-sitemap.sh > sitemap.xml
        aws s3 cp sitemap.xml s3://$S3_BUCKET/sitemap.xml >> $BASEDIR/logs/aws_sync.log
    - name: CloudFront cache invalidation
      run: aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"
    - name: List S3
      run: aws s3 ls s3://$S3_BUCKET --recursive --summarize > $BASEDIR/logs/site-content.log
    - uses: actions/upload-artifact@v1
      with:
        name: logs
        path: arrow-libs/logs
