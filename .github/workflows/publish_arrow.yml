name: "Publish Arrow"

on:
  push:
    branches:
    - master
    paths:
    - 'gradle.properties'
    - 'gradle/**'
    - 'scripts/**'

jobs:
  publish-arrow:

    env:
      BASEDIR: ${{github.workspace}}/..
      JAVA_OPTS: -Xms512m -Xmx1024m
      BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Wait for other related changes
      run: sleep 180
    - name: "Get target: OSS or Bintray"
      id: versions
      run: |
        LATEST_PUBLISHED_RELEASE_VERSION=$(curl -X GET https://api.bintray.com/packages/arrow-kt/arrow-kt/arrow/versions/_latest | jq -r '.name')
        RELEASE_VERSION=$(grep LATEST_VERSION gradle.properties | cut -d= -f2)
        NEW_RELEASE_VERSION_EXISTS=$([ "$LATEST_PUBLISHED_RELEASE_VERSION" == "$RELEASE_VERSION" ] && echo '0' || echo '1')
        echo "::set-output name=latest-published-release-version::$LATEST_PUBLISHED_RELEASE_VERSION"
        echo "::set-output name=release-version::$RELEASE_VERSION"
        echo "::set-output name=new-release-version-exists::$NEW_RELEASE_VERSION_EXISTS"
    - name: Publish SNAPSHOT into OSS
      run: |
        $BASEDIR/arrow/scripts/libs-publish.sh
    - name: Create tag
      if: steps.versions.outputs.new-release-version-exists == '1'
      run: |
        git remote set-url origin https://arrow-kt:$GITHUB_TOKEN@github.com/arrow-kt/arrow.git
        git config --global user.email "arrow-kt@users.noreply.github.com"
        git config --global user.name "arrow-kt"
        git tag -a ${{ steps.versions.outputs.release-version }} -m "Release ${{ steps.versions.outputs.release-version }}"
        git push origin ${{ steps.versions.outputs.release-version }}
    - name: Create release notes
      if: steps.versions.outputs.new-release-version-exists == '1'
      run: |
        export LATEST_PUBLISHED_VERSION=${{ steps.versions.outputs.latest-published-release-version }}
        export RELEASE_VERSION=${{ steps.versions.outputs.release-version }}
        $BASEDIR/arrow/scripts/create-release-notes-all-libraries.sh
